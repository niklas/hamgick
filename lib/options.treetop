grammar Options

  rule manual_options
    (key_value_pair space ',' space options) {
       def value
         key_value_pair.value.merge(options.value)
       end
    }
    /
    key_value_pair
  end

  rule key_value_pair
    options_key space
    '=>' space 
    (argument) {
       def value
         { options_key.text_value.to_sym => argument.value }
       end
    }
  end

  rule options_key
    ':' [a-zA-Z_\d]+
  end

  rule manual_arguments
    argument space "," space arguments {
       def value
         eval %Q~[ #{argument.text_value} ]~ + arguments.value
       end
    }
    /
    argument {
      def value
        [ argument.value ]
      end
    }
  end

  rule argument
    fixnum / string
  end


  rule fixnum
    sign:[+-]? value:[\d]+ {
       def value
         super.text_value.to_i * (sign.text_value == '-' ? -1 : 1)
       end
    }
  end

  rule string
    "'" value:[^'\n]* "'" {
       def value
         super.text_value
       end
    }
    /
    ["] value:[^"\n]* ["] {
       def value
         super.text_value
       end
    }
  end

  rule space
    " "*
  end

end
