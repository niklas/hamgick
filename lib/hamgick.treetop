grammar Hamgick
  rule rot
    '%image' newline indention draw  {
      def render(opts={})
        image(opts).to_blob
      end

      def image(opts={})
        opts = opts.dup.reverse_merge({
          :width => 64,
          :height => 64,
          :background_color => 'green'
        })
        @image = Magick::Image.new(opts[:width], opts[:height]) do
          self.background_color = opts[:background_color]
          self.format = 'png'
        end
        if respond_to?(:draw)
          STDERR.print "D"
          draw.draw(@image) 
        end
        @image
      end
    }
  end

  rule draw
    '%draw' newline indention indention circle {
      def draw(image)
        @draw = Magick::Draw.new
        if respond_to?(:circle)
          circle.draw(@draw) 
          @draw.draw(image)
        end
      end
    }
  end

  rule circle
    '%circle' {
      def draw(draw, opts={})
        opts = opts.dup.reverse_merge({
          :radius => 16,
          :x => 32, :y => 32
        })
        origin_x = opts[:x]
        origin_y = opts[:y]
        perim_x  = opts[:x] - opts[:radius]
        perim_y  = opts[:y]
        draw.circle(origin_x, origin_y, perim_x, perim_y)
      end
    }
  end

  rule next_line_plus_indent
    [\n] indention
  end

  rule line
    indention* tag newline?
  end

  rule indention
    '  '
  end

  rule tag
    "%" command <CommandNode>
  end

  rule command
    command_with_child / command_without_child
  end

  rule command_with_child
    full_command {
      def compile(context)
        STDERR.puts command_name
      end
    }
  end

  rule command_without_child
    full_command {
      def compile(context)
        STDERR.puts command_name
      end
    }
  end

  rule full_command
     [a-z]+ 
  end

  rule newline
    [\n]
  end
end
